import requests
import json
import os
import validators  # pip install validators
import time
from dotenv import load_dotenv  # pip install python-dotenv

# Load .env file from flipper_AI
load_dotenv("/Users/stephentaykor/Desktop/flipper_Simulation/Flipper_AI/.env")

# Get eBay API key from .env
EBAY_APP_ID = os.getenv("EBAY_APP_ID")
if not EBAY_APP_ID:
    print("Error: EBAY_APP_ID not found in .env file")
    exit(1)

# Log the App ID being used
print(f"Using EBAY_APP_ID: {EBAY_APP_ID}")

# Use production endpoint
endpoint = "https://svcs.ebay.com/services/search/FindingService/v1"
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept": "image/jpeg,image/png"
}

params = {
    "OPERATION-NAME": "findItemsByKeywords",
    "SERVICE-VERSION": "1.0.0",
    "SECURITY-APPNAME": EBAY_APP_ID,
    "RESPONSE-DATA-FORMAT": "JSON",
    "REST-PAYLOAD": "",
    "keywords": "laptop",
    "paginationInput.entriesPerPage": "50",
    "outputSelector": "PictureURLLarge"
}

# Make API request
try:
    print(f"Making request to: {endpoint}")
    response = requests.get(endpoint, params=params, headers=headers, timeout=10)
    response.raise_for_status()
    data = response.json()
    print(f"API response: {json.dumps(data, indent=2)[:500]}...")  # Log first 500 chars
except Exception as e:
    print(f"API request failed: {e}")
    exit(1)

# Parse items
items = []
search_results = data.get("findItemsByKeywordsResponse", [])[0].get("searchResult", [])[0].get("item", [])
for item in search_results:
    gallery_url = item.get("galleryURL", [None])[0]
    if not gallery_url or not validators.url(gallery_url):
        print(f"Skipping item {item.get('title', ['unknown'])[0]}: No valid galleryURL ({gallery_url})")
        continue
    item_info = {
        "title": item.get("title", [None])[0],
        "price": item.get("sellingStatus", [{}])[0].get("currentPrice", [{}])[0].get("__value__", None),
        "currency": item.get("sellingStatus", [{}])[0].get("currentPrice", [{}])[0].get("@currencyId", None),
        "category": item.get("primaryCategory", [{}])[0].get("categoryName", [None])[0],
        "itemId": item.get("itemId", [None])[0],
        "viewItemURL": item.get("viewItemURL", [None])[0],
        "galleryURL": gallery_url,
        "location": item.get("location", [None])[0],
        "condition": item.get("condition", [{}])[0].get("conditionDisplayName", [None])[0],
        "listingType": item.get("listingInfo", [{}])[0].get("listingType", [None])[0],
        "sellerUserName": item.get("sellerInfo", [{}])[0].get("sellerUserName", [None])[0],
        "shippingType": item.get("shippingInfo", [{}])[0].get("shippingType", [None])[0],
        "shippingServiceCost": item.get("shippingInfo", [{}])[0].get("shippingServiceCost", [{}])[0].get("__value__", None),
        "shippingCurrency": item.get("shippingInfo", [{}])[0].get("shippingServiceCost", [{}])[0].get("@currencyId", None),
        "country": item.get("country", [None])[0],
        "startTime": item.get("listingInfo", [{}])[0].get("startTime", [None])[0],
        "endTime": item.get("listingInfo", [{}])[0].get("endTime", [None])[0],
    }
    items.append(item_info)

# Set up folders
base_dir = "/Users/stephentaykor/Desktop/flipper_Simulation/Flipper/Flipper/ebay_images"
image_dir = os.path.join(base_dir, "images")
json_dir = os.path.join(base_dir, "json")
try:
    os.makedirs(image_dir, exist_ok=True)
    os.makedirs(json_dir, exist_ok=True)
    print(f"Created directories: {image_dir}, {json_dir}")
except Exception as e:
    print(f"Failed to create directories: {e}")
    exit(1)

# Download images and save metadata
image_count = 0
for item in items:
    img_url = item.get("galleryURL")
    title = item.get("title", "unknown_item")
    item_id = item.get("itemId", "unknown_id")
    safe_title = "".join(c if c.isalnum() or c in " _-" else "_" for c in title)[:50]
    image_filename = f"{safe_title}_{item_id}.jpg"
    image_path = os.path.join(image_dir, image_filename)
    json_filename = f"{safe_title}_{item_id}.json"
    json_path = os.path.join(json_dir, json_filename)

    print(f"\nProcessing {title} (ID: {item_id})")
    print(f"Image URL: {img_url}")
    print(f"Image will be saved to: {image_path}")

    img_data = None
    if img_url:  # Only attempt download if URL exists
        for attempt in range(2):
            try:
                img_response = requests.get(img_url, headers=headers, timeout=10, allow_redirects=True)
                content_type = img_response.headers.get('content-type', '').lower()
                content_length = int(img_response.headers.get('content-length', 0))
                final_url = img_response.url
                print(f"Attempt {attempt + 1}: Status {img_response.status_code}, Content-Type {content_type}, Size {content_length} bytes, Final URL: {final_url}")
                if (img_response.status_code == 200 and 'image' in content_type and content_length > 1000):
                    img_data = img_response.content
                    break
                else:
                    print(f"Invalid response for {title}: Status {img_response.status_code}, Content-Type {content_type}, Size {content_length} bytes")
            except Exception as e:
                print(f"Attempt {attempt + 1} failed for {title}: {e}")
            time.sleep(1)

    if img_data:
        try:
            with open(image_path, "wb") as img_file:
                img_file.write(img_data)
            file_size = os.path.getsize(image_path)
            if file_size > 1000:
                print(f"Downloaded image for {title} to {image_path} ({file_size} bytes)")
                image_count += 1
            else:
                print(f"Empty or too small file for {title} at {image_path} ({file_size} bytes)")
                os.remove(image_path) if os.path.exists(image_path) else None
                img_data = None
        except Exception as e:
            print(f"Failed to save image for {title}: {e}")
            img_data = None
    else:
        print(f"No valid image data for {title} (galleryURL: {img_url})")

    item["image_filename"] = image_filename if img_data else "placeholder.jpg"
    with open(json_path, "w") as f:
        json.dump(item, f, indent=2)
    print(f"Saved metadata for {title} to {json_path}")

print(f"Total images downloaded: {image_count}")

ls /Users/stephentaykor/Desktop/flipper_Simulation/Flipper/Flipper/ebay_fetch.py^X
^X
ls -l /Users/stephentaykor/Desktop/flipper_Simulation/Flipper/Flipper/ebay_images/images

